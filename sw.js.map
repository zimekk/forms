{"version":3,"file":"sw.js","mappings":"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","sources":["webpack://@dev/web/../../node_modules/idb/build/esm/wrap-idb-value.js","webpack://@dev/web/../../node_modules/idb/build/esm/index.js","webpack://@dev/web/./src/service-worker.ts"],"sourcesContent":["const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/// <reference lib=\"webworker\" />\n// https://github.com/jakearchibald/idb#using-npm\nimport { openDB, DBSchema } from \"idb\";\n\n// https://stackoverflow.com/questions/63116331/how-to-migrate-service-worker-from-js-to-ts\n/* eslint-disable no-redeclare */\ndeclare var self: ServiceWorkerGlobalScope;\n\nexport {};\n\n// Register event listener for the 'push' event.\nself.addEventListener(\"push\", function (event) {\n  event.waitUntil(\n    self.registration.showNotification(\"ServiceWorker\", {\n      body: \"notification\",\n    })\n  );\n});\n\n// https://serviceworke.rs/message-relay_index_doc.html\nself.addEventListener(\"message\", function (event) {\n  event.waitUntil(\n    self.registration.showNotification(\"ServiceWorker\", {\n      body: event.data,\n    })\n  );\n});\n\n// https://github.com/jakearchibald/idb#typescript\ninterface MyDB extends DBSchema {\n  \"my-store\": {\n    key: string;\n    value: number;\n  };\n  products: {\n    value: {\n      name: string;\n      price: number;\n      productCode: string;\n    };\n    key: string;\n    indexes: { \"by-price\": number };\n  };\n}\n\nasync function createDB() {\n  const name = \"my-db\";\n  const version = undefined;\n  const storeName = \"my-store\";\n  console.log([\"createDB\"]);\n\n  // https://github.com/jakearchibald/idb#opendb\n  const db = await openDB<MyDB>(name, version, {\n    upgrade(db, oldVersion, newVersion, transaction) {\n      // …\n      console.log([\"upgrade\"], { oldVersion, newVersion, transaction });\n\n      db.createObjectStore(storeName);\n\n      const productStore = db.createObjectStore(\"products\", {\n        keyPath: \"productCode\",\n      });\n      productStore.createIndex(\"by-price\", \"price\");\n    },\n    blocked() {\n      // …\n    },\n    blocking() {\n      // …\n    },\n    terminated() {\n      // …\n    },\n  });\n\n  const key = \"key\";\n\n  // https://github.com/jakearchibald/idb#general-enhancements\n  // const store = db.transaction(storeName).objectStore(storeName);\n  // const value = await store.get(key);\n\n  // https://github.com/jakearchibald/idb#shortcuts-to-getset-from-an-object-store\n  // Get a value from a store:\n  const value = await db.get(storeName, key);\n  // Set a value in a store:\n  await db.put(storeName, parseInt(value || 0) + 1, key);\n}\n\nself.addEventListener(\"activate\", function (event) {\n  console.log([\"activate\"], { event });\n  event.waitUntil(createDB());\n});\n\nconst CACHE_NAME = \"cache-v1\";\nconst OFFLINE_URL = \"offline.html\";\n\n// async function cacheAssets() {\n//   // return caches.open(CACHE_NAME).then((cache) => console.log({ cache }) || cache.add(new Request(OFFLINE_URL, { cache: \"reload\" })));\n//   try {\n//     const cache = await caches.open(CACHE_NAME);\n//     console.log([\"cacheAssets\"], { cache });\n//     await cache.add(new Request(OFFLINE_URL, { cache: \"reload\" }));\n//     await cache.add(new Request(\"assets/manifest.json\", { cache: \"reload\" }));\n//     await cache.add(new Request(\"assets/favicon.ico\", { cache: \"reload\" }));\n//   } catch (error) {\n//     console.error({ error });\n//     if (error.name === \"QuotaExceededError\") {\n//       // Fallback code goes here\n//     }\n//   }\n// }\n\nconst CONTENTS = [OFFLINE_URL, \"assets/manifest.json\", \"assets/favicon.ico\"];\n\nself.addEventListener(\"install\", function (event) {\n  console.log([\"install\"], { event });\n  // event.waitUntil(cacheAssets());\n  event.waitUntil(\n    caches.open(CACHE_NAME).then((cache) => cache.addAll(CONTENTS))\n  );\n  self.skipWaiting();\n});\n\nself.addEventListener(\"fetch\", function (event) {\n  console.log([\"fetch\"], { event });\n\n  if (event.request.mode !== \"navigate\") {\n    return;\n  }\n\n  // event.respondWith(\n  //   (async () => {\n  //     try {\n  //       const networkResponse = await fetch(event.request);\n  //       return networkResponse;\n  //     } catch (error) {\n  //       const cache = await caches.open(CACHE_NAME);\n  //       const cachedResponse = await cache.match(OFFLINE_URL);\n  //       return cachedResponse;\n  //     }\n  //   })()\n  // );\n\n  event.respondWith(\n    fetch(event.request).catch(() =>\n      caches.open(CACHE_NAME).then((cache) => cache.match(event.request))\n    )\n  );\n\n  // event.respondWith(\n  //   caches\n  //     .match(event.request)\n  //     .then(\n  //       (response) =>\n  //         console.log([\"match\"], { response }) ||\n  //         response ||\n  //         fetch(event.request)\n  //     )\n  // );\n});\n"],"names":["idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","get","target","prop","receiver","IDBTransaction","objectStoreNames","undefined","objectStore","set","value","has","transformCachableValue","func","IDBDatabase","prototype","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","args","apply","unwrap","this","storeNames","tx","call","sort","done","Promise","resolve","reject","unlisten","removeEventListener","complete","error","DOMException","addEventListener","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","c","Proxy","IDBRequest","request","promise","success","result","then","catch","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","async","storeName","store","index","shift","all","oldTraps","self","event","waitUntil","registration","showNotification","body","data","console","log","db","name","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","oldVersion","newVersion","openDB","createObjectStore","keyPath","createIndex","put","parseInt","createDB","CACHE_NAME","CONTENTS","caches","cache","addAll","skipWaiting","mode","respondWith","fetch","match"],"sourceRoot":""}